import{K as m,r as u,L as c}from"./index-Bt48Nl8M.js";const L=m("list",()=>{const t=u([]);return{lists:t,fetchLists:async n=>{try{const a=await c.get(`/lists/project/${n}`);return t.value=a.data,t.value}catch(a){console.error("Failed to fetch lists:",a)}},getListById:n=>t.value.find(a=>a._id===n),createList:async n=>{try{const a=await c.post("/lists",n);return t.value.push(a.data),a.data}catch(a){console.error("Failed to create list:",a)}},updateList:async n=>{try{const a=await c.put(`/lists/${n._id}`,n),p=t.value.findIndex(f=>f._id===n._id);return p!==-1&&(t.value[p]=a.data),a.data}catch(a){console.error("Failed to update list:",a)}},deleteList:async n=>{try{await c.delete(`/lists/${n}`),t.value=t.value.filter(a=>a._id!==n)}catch(a){console.error("Failed to delete list:",a)}}}}),M=m("task",()=>{const t=u({}),l=u([]),h=u([]),k=u([]),y=L(),T=async e=>{try{const s=await c.get(`/tasks/list/${e}`);t.value[e]=s.data}catch(s){console.error("Failed to fetch tasks:",s)}},n=async()=>{try{console.log("The tasks for the user are being fetched");const e=await c.get("/tasks");h.value=e.data}catch(e){console.error("Failed to fetch tasks:",e)}},a=async e=>{try{const s=await c.get(`/tasks/project/${e}`);return l.value=s.data,l.value}catch(s){console.error("Failed to fetch tasks:",s)}},p=async()=>{try{const e=await c.get("/tasks/templates");return k.value=e.data,e.data}catch(e){console.error("Failed to fetch task templates:",e)}},f=e=>{for(const s in t.value){const o=t.value[s].find(r=>r._id===e);if(o)return o}return null};return{tasksByListId:t,fetchAllTasks:n,fetchTasks:T,fetchTasksByProject:a,getCloseToOverdueTasks:()=>l.value.filter(e=>e.hoursUsed>=e.hoursAllocated*.9),getProjectIdForTask:e=>{for(const s in t.value){const o=t.value[s].find(r=>r._id===e);if(o){const r=y.getListById(o.listId);return r?r.projectId:null}}return null},getTaskById:f,createTask:async(e,s)=>{try{const r=(await c.post(`/tasks/${e}`,s)).data;t.value[r.listId]||(t.value[r.listId]=[]),t.value[r.listId].push(r)}catch(o){console.error("Failed to create task:",o)}},updateTask:async(e,s)=>{try{const r=(await c.put(`/tasks/${e}`,s)).data;for(const i in t.value){const d=t.value[i].findIndex(v=>v._id===e);d!==-1&&(t.value[i][d]=r)}}catch(o){console.error("Failed to update task:",o)}},deleteTask:async e=>{try{await c.delete(`/tasks/${e}`);for(const s in t.value)t.value[s]=t.value[s].filter(o=>o._id!==e)}catch(s){console.error("Failed to delete task:",s)}},tasks:l,fetchTaskTemplates:p,taskTemplates:k,updateMemberUsedHours:async(e,s,o)=>{try{const r=f(e);if(r){const i=r.assignedMembers.findIndex(d=>d._id===s);if(i!==-1){r.assignedMembers[i].usedHours=o;const v=(await c.put(`/tasks/${e}`,r)).data;for(const g in t.value){const I=t.value[g].findIndex(F=>F._id===e);I!==-1&&(t.value[g][I]=v)}}}}catch(r){console.error("Failed to update member used hours:",r)}}}});export{L as a,M as u};
